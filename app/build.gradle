apply plugin: 'com.android.application'

android {
    compileSdkVersion 28

    signingConfigs {
        config {
            keyAlias 'myKey'
            keyPassword 'myPassword'
            storeFile file('D:/Keys/key.jks')
            storePassword 'myStorePassword'
        }
    }

    defaultConfig {
        applicationId "com.example.shaft.softwaredesign"
        minSdkVersion 28
        targetSdkVersion 28
        versionCode getVerCode()
        versionName getVerName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${applicationId}-${variant.versionName}.apk"
        }
    }

    flavorDimensions "stage"
    productFlavors {
        dev {
            dimension "stage"
            versionNameSuffix "-dev"
        }
        master {
            dimension "stage"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:gridlayout-v7:28.0.0'
}

def getVerName() {
    def command = "git describe --tags"
    def process = command.execute()
    def output = process.in.text

    if (output == "") {
        return "0.0.0"
    } else if (output.contains('-')) {
        def desc = output.split('-')
        def ver = desc[0]
        def patch = desc[1]

        return "${ver}.${patch}"
    }

    return "${output.split('\n')[0]}.0"
}

def getVerCode() {
    def version = getVerName().replace('.', '-').split('-')
    return version[0].toInteger() * 100000 + version[1].toInteger() * 1000 + version[0].toInteger()
}
